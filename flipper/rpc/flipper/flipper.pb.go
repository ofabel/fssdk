// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: flipper.proto

package flipper

import (
	desktop "github.com/ofabel/fssdk/flipper/rpc/desktop"
	gpio "github.com/ofabel/fssdk/flipper/rpc/gpio"
	gui "github.com/ofabel/fssdk/flipper/rpc/gui"
	property "github.com/ofabel/fssdk/flipper/rpc/property"
	storage "github.com/ofabel/fssdk/flipper/rpc/storage"
	system "github.com/ofabel/fssdk/flipper/rpc/system"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandStatus int32

const (
	CommandStatus_OK CommandStatus = 0
	// *< Common Errors
	CommandStatus_ERROR                                CommandStatus = 1  //*< Unknown error
	CommandStatus_ERROR_DECODE                         CommandStatus = 2  //*< Command can't be decoded successfully - command_id in response may be wrong!
	CommandStatus_ERROR_NOT_IMPLEMENTED                CommandStatus = 3  //*< Command successfully decoded, but not implemented (deprecated or not yet implemented)
	CommandStatus_ERROR_BUSY                           CommandStatus = 4  //*< Somebody took global lock, so not all commands are available
	CommandStatus_ERROR_CONTINUOUS_COMMAND_INTERRUPTED CommandStatus = 14 //*< Not received has_next == 0
	CommandStatus_ERROR_INVALID_PARAMETERS             CommandStatus = 15 //*< not provided (or provided invalid) crucial parameters to perform RPC
	// *< Storage Errors
	CommandStatus_ERROR_STORAGE_NOT_READY         CommandStatus = 5  //*< FS not ready
	CommandStatus_ERROR_STORAGE_EXIST             CommandStatus = 6  //*< File/Dir already exist
	CommandStatus_ERROR_STORAGE_NOT_EXIST         CommandStatus = 7  //*< File/Dir does not exist
	CommandStatus_ERROR_STORAGE_INVALID_PARAMETER CommandStatus = 8  //*< Invalid API parameter
	CommandStatus_ERROR_STORAGE_DENIED            CommandStatus = 9  //*< Access denied
	CommandStatus_ERROR_STORAGE_INVALID_NAME      CommandStatus = 10 //*< Invalid name/path
	CommandStatus_ERROR_STORAGE_INTERNAL          CommandStatus = 11 //*< Internal error
	CommandStatus_ERROR_STORAGE_NOT_IMPLEMENTED   CommandStatus = 12 //*< Function is not implemented
	CommandStatus_ERROR_STORAGE_ALREADY_OPEN      CommandStatus = 13 //*< File/Dir already opened
	CommandStatus_ERROR_STORAGE_DIR_NOT_EMPTY     CommandStatus = 18 //*< Directory, you're going to remove is not empty
	// *< Application Errors
	CommandStatus_ERROR_APP_CANT_START    CommandStatus = 16 //*< Can't start app - internal error
	CommandStatus_ERROR_APP_SYSTEM_LOCKED CommandStatus = 17 //*< Another app is running
	CommandStatus_ERROR_APP_NOT_RUNNING   CommandStatus = 21 //*< App is not running or doesn't support RPC commands
	CommandStatus_ERROR_APP_CMD_ERROR     CommandStatus = 22 //*< Command execution error
	// *< Virtual Display Errors
	CommandStatus_ERROR_VIRTUAL_DISPLAY_ALREADY_STARTED CommandStatus = 19 //*< Virtual Display session can't be started twice
	CommandStatus_ERROR_VIRTUAL_DISPLAY_NOT_STARTED     CommandStatus = 20 //*< Virtual Display session can't be stopped when it's not started
	// *< GPIO Errors
	CommandStatus_ERROR_GPIO_MODE_INCORRECT   CommandStatus = 58
	CommandStatus_ERROR_GPIO_UNKNOWN_PIN_MODE CommandStatus = 59
)

// Enum value maps for CommandStatus.
var (
	CommandStatus_name = map[int32]string{
		0:  "OK",
		1:  "ERROR",
		2:  "ERROR_DECODE",
		3:  "ERROR_NOT_IMPLEMENTED",
		4:  "ERROR_BUSY",
		14: "ERROR_CONTINUOUS_COMMAND_INTERRUPTED",
		15: "ERROR_INVALID_PARAMETERS",
		5:  "ERROR_STORAGE_NOT_READY",
		6:  "ERROR_STORAGE_EXIST",
		7:  "ERROR_STORAGE_NOT_EXIST",
		8:  "ERROR_STORAGE_INVALID_PARAMETER",
		9:  "ERROR_STORAGE_DENIED",
		10: "ERROR_STORAGE_INVALID_NAME",
		11: "ERROR_STORAGE_INTERNAL",
		12: "ERROR_STORAGE_NOT_IMPLEMENTED",
		13: "ERROR_STORAGE_ALREADY_OPEN",
		18: "ERROR_STORAGE_DIR_NOT_EMPTY",
		16: "ERROR_APP_CANT_START",
		17: "ERROR_APP_SYSTEM_LOCKED",
		21: "ERROR_APP_NOT_RUNNING",
		22: "ERROR_APP_CMD_ERROR",
		19: "ERROR_VIRTUAL_DISPLAY_ALREADY_STARTED",
		20: "ERROR_VIRTUAL_DISPLAY_NOT_STARTED",
		58: "ERROR_GPIO_MODE_INCORRECT",
		59: "ERROR_GPIO_UNKNOWN_PIN_MODE",
	}
	CommandStatus_value = map[string]int32{
		"OK":                                    0,
		"ERROR":                                 1,
		"ERROR_DECODE":                          2,
		"ERROR_NOT_IMPLEMENTED":                 3,
		"ERROR_BUSY":                            4,
		"ERROR_CONTINUOUS_COMMAND_INTERRUPTED":  14,
		"ERROR_INVALID_PARAMETERS":              15,
		"ERROR_STORAGE_NOT_READY":               5,
		"ERROR_STORAGE_EXIST":                   6,
		"ERROR_STORAGE_NOT_EXIST":               7,
		"ERROR_STORAGE_INVALID_PARAMETER":       8,
		"ERROR_STORAGE_DENIED":                  9,
		"ERROR_STORAGE_INVALID_NAME":            10,
		"ERROR_STORAGE_INTERNAL":                11,
		"ERROR_STORAGE_NOT_IMPLEMENTED":         12,
		"ERROR_STORAGE_ALREADY_OPEN":            13,
		"ERROR_STORAGE_DIR_NOT_EMPTY":           18,
		"ERROR_APP_CANT_START":                  16,
		"ERROR_APP_SYSTEM_LOCKED":               17,
		"ERROR_APP_NOT_RUNNING":                 21,
		"ERROR_APP_CMD_ERROR":                   22,
		"ERROR_VIRTUAL_DISPLAY_ALREADY_STARTED": 19,
		"ERROR_VIRTUAL_DISPLAY_NOT_STARTED":     20,
		"ERROR_GPIO_MODE_INCORRECT":             58,
		"ERROR_GPIO_UNKNOWN_PIN_MODE":           59,
	}
)

func (x CommandStatus) Enum() *CommandStatus {
	p := new(CommandStatus)
	*p = x
	return p
}

func (x CommandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_flipper_proto_enumTypes[0].Descriptor()
}

func (CommandStatus) Type() protoreflect.EnumType {
	return &file_flipper_proto_enumTypes[0]
}

func (x CommandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandStatus.Descriptor instead.
func (CommandStatus) EnumDescriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{0}
}

// There are Server commands (e.g. Storage_write), which have no body message
// in response. But 'oneof' obligate to have at least 1 encoded message
// in scope. For this needs Empty message is implemented.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{0}
}

type StopSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSession) Reset() {
	*x = StopSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSession) ProtoMessage() {}

func (x *StopSession) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSession.ProtoReflect.Descriptor instead.
func (*StopSession) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{1}
}

type Main struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId     uint32        `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	CommandStatus CommandStatus `protobuf:"varint,2,opt,name=command_status,json=commandStatus,proto3,enum=PB.CommandStatus" json:"command_status,omitempty"`
	HasNext       bool          `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// Types that are assignable to Content:
	//
	//	*Main_Empty
	//	*Main_StopSession
	//	*Main_SystemPingRequest
	//	*Main_SystemPingResponse
	//	*Main_SystemRebootRequest
	//	*Main_SystemDeviceInfoRequest
	//	*Main_SystemDeviceInfoResponse
	//	*Main_SystemFactoryResetRequest
	//	*Main_SystemGetDatetimeRequest
	//	*Main_SystemGetDatetimeResponse
	//	*Main_SystemSetDatetimeRequest
	//	*Main_SystemPlayAudiovisualAlertRequest
	//	*Main_SystemProtobufVersionRequest
	//	*Main_SystemProtobufVersionResponse
	//	*Main_SystemUpdateRequest
	//	*Main_SystemUpdateResponse
	//	*Main_SystemPowerInfoRequest
	//	*Main_SystemPowerInfoResponse
	//	*Main_StorageInfoRequest
	//	*Main_StorageInfoResponse
	//	*Main_StorageTimestampRequest
	//	*Main_StorageTimestampResponse
	//	*Main_StorageStatRequest
	//	*Main_StorageStatResponse
	//	*Main_StorageListRequest
	//	*Main_StorageListResponse
	//	*Main_StorageReadRequest
	//	*Main_StorageReadResponse
	//	*Main_StorageWriteRequest
	//	*Main_StorageDeleteRequest
	//	*Main_StorageMkdirRequest
	//	*Main_StorageMd5SumRequest
	//	*Main_StorageMd5SumResponse
	//	*Main_StorageRenameRequest
	//	*Main_StorageBackupCreateRequest
	//	*Main_StorageBackupRestoreRequest
	//	*Main_StorageTarExtractRequest
	//	*Main_AppStartRequest
	//	*Main_AppLockStatusRequest
	//	*Main_AppLockStatusResponse
	//	*Main_AppExitRequest
	//	*Main_AppLoadFileRequest
	//	*Main_AppButtonPressRequest
	//	*Main_AppButtonReleaseRequest
	//	*Main_AppGetErrorRequest
	//	*Main_AppGetErrorResponse
	//	*Main_AppDataExchangeRequest
	//	*Main_GuiStartScreenStreamRequest
	//	*Main_GuiStopScreenStreamRequest
	//	*Main_GuiScreenFrame
	//	*Main_GuiSendInputEventRequest
	//	*Main_GuiStartVirtualDisplayRequest
	//	*Main_GuiStopVirtualDisplayRequest
	//	*Main_GpioSetPinMode
	//	*Main_GpioSetInputPull
	//	*Main_GpioGetPinMode
	//	*Main_GpioGetPinModeResponse
	//	*Main_GpioReadPin
	//	*Main_GpioReadPinResponse
	//	*Main_GpioWritePin
	//	*Main_GpioGetOtgMode
	//	*Main_GpioGetOtgModeResponse
	//	*Main_GpioSetOtgMode
	//	*Main_AppStateResponse
	//	*Main_PropertyGetRequest
	//	*Main_PropertyGetResponse
	//	*Main_DesktopIsLockedRequest
	//	*Main_DesktopUnlockRequest
	//	*Main_DesktopStatusSubscribeRequest
	//	*Main_DesktopStatusUnsubscribeRequest
	//	*Main_DesktopStatus
	Content isMain_Content `protobuf_oneof:"content"`
}

func (x *Main) Reset() {
	*x = Main{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Main) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Main) ProtoMessage() {}

func (x *Main) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Main.ProtoReflect.Descriptor instead.
func (*Main) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{2}
}

func (x *Main) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *Main) GetCommandStatus() CommandStatus {
	if x != nil {
		return x.CommandStatus
	}
	return CommandStatus_OK
}

func (x *Main) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (m *Main) GetContent() isMain_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Main) GetEmpty() *Empty {
	if x, ok := x.GetContent().(*Main_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Main) GetStopSession() *StopSession {
	if x, ok := x.GetContent().(*Main_StopSession); ok {
		return x.StopSession
	}
	return nil
}

func (x *Main) GetSystemPingRequest() *system.PingRequest {
	if x, ok := x.GetContent().(*Main_SystemPingRequest); ok {
		return x.SystemPingRequest
	}
	return nil
}

func (x *Main) GetSystemPingResponse() *system.PingResponse {
	if x, ok := x.GetContent().(*Main_SystemPingResponse); ok {
		return x.SystemPingResponse
	}
	return nil
}

func (x *Main) GetSystemRebootRequest() *system.RebootRequest {
	if x, ok := x.GetContent().(*Main_SystemRebootRequest); ok {
		return x.SystemRebootRequest
	}
	return nil
}

func (x *Main) GetSystemDeviceInfoRequest() *system.DeviceInfoRequest {
	if x, ok := x.GetContent().(*Main_SystemDeviceInfoRequest); ok {
		return x.SystemDeviceInfoRequest
	}
	return nil
}

func (x *Main) GetSystemDeviceInfoResponse() *system.DeviceInfoResponse {
	if x, ok := x.GetContent().(*Main_SystemDeviceInfoResponse); ok {
		return x.SystemDeviceInfoResponse
	}
	return nil
}

func (x *Main) GetSystemFactoryResetRequest() *system.FactoryResetRequest {
	if x, ok := x.GetContent().(*Main_SystemFactoryResetRequest); ok {
		return x.SystemFactoryResetRequest
	}
	return nil
}

func (x *Main) GetSystemGetDatetimeRequest() *system.GetDateTimeRequest {
	if x, ok := x.GetContent().(*Main_SystemGetDatetimeRequest); ok {
		return x.SystemGetDatetimeRequest
	}
	return nil
}

func (x *Main) GetSystemGetDatetimeResponse() *system.GetDateTimeResponse {
	if x, ok := x.GetContent().(*Main_SystemGetDatetimeResponse); ok {
		return x.SystemGetDatetimeResponse
	}
	return nil
}

func (x *Main) GetSystemSetDatetimeRequest() *system.SetDateTimeRequest {
	if x, ok := x.GetContent().(*Main_SystemSetDatetimeRequest); ok {
		return x.SystemSetDatetimeRequest
	}
	return nil
}

func (x *Main) GetSystemPlayAudiovisualAlertRequest() *system.PlayAudiovisualAlertRequest {
	if x, ok := x.GetContent().(*Main_SystemPlayAudiovisualAlertRequest); ok {
		return x.SystemPlayAudiovisualAlertRequest
	}
	return nil
}

func (x *Main) GetSystemProtobufVersionRequest() *system.ProtobufVersionRequest {
	if x, ok := x.GetContent().(*Main_SystemProtobufVersionRequest); ok {
		return x.SystemProtobufVersionRequest
	}
	return nil
}

func (x *Main) GetSystemProtobufVersionResponse() *system.ProtobufVersionResponse {
	if x, ok := x.GetContent().(*Main_SystemProtobufVersionResponse); ok {
		return x.SystemProtobufVersionResponse
	}
	return nil
}

func (x *Main) GetSystemUpdateRequest() *system.UpdateRequest {
	if x, ok := x.GetContent().(*Main_SystemUpdateRequest); ok {
		return x.SystemUpdateRequest
	}
	return nil
}

func (x *Main) GetSystemUpdateResponse() *system.UpdateResponse {
	if x, ok := x.GetContent().(*Main_SystemUpdateResponse); ok {
		return x.SystemUpdateResponse
	}
	return nil
}

func (x *Main) GetSystemPowerInfoRequest() *system.PowerInfoRequest {
	if x, ok := x.GetContent().(*Main_SystemPowerInfoRequest); ok {
		return x.SystemPowerInfoRequest
	}
	return nil
}

func (x *Main) GetSystemPowerInfoResponse() *system.PowerInfoResponse {
	if x, ok := x.GetContent().(*Main_SystemPowerInfoResponse); ok {
		return x.SystemPowerInfoResponse
	}
	return nil
}

func (x *Main) GetStorageInfoRequest() *storage.InfoRequest {
	if x, ok := x.GetContent().(*Main_StorageInfoRequest); ok {
		return x.StorageInfoRequest
	}
	return nil
}

func (x *Main) GetStorageInfoResponse() *storage.InfoResponse {
	if x, ok := x.GetContent().(*Main_StorageInfoResponse); ok {
		return x.StorageInfoResponse
	}
	return nil
}

func (x *Main) GetStorageTimestampRequest() *storage.TimestampRequest {
	if x, ok := x.GetContent().(*Main_StorageTimestampRequest); ok {
		return x.StorageTimestampRequest
	}
	return nil
}

func (x *Main) GetStorageTimestampResponse() *storage.TimestampResponse {
	if x, ok := x.GetContent().(*Main_StorageTimestampResponse); ok {
		return x.StorageTimestampResponse
	}
	return nil
}

func (x *Main) GetStorageStatRequest() *storage.StatRequest {
	if x, ok := x.GetContent().(*Main_StorageStatRequest); ok {
		return x.StorageStatRequest
	}
	return nil
}

func (x *Main) GetStorageStatResponse() *storage.StatResponse {
	if x, ok := x.GetContent().(*Main_StorageStatResponse); ok {
		return x.StorageStatResponse
	}
	return nil
}

func (x *Main) GetStorageListRequest() *storage.ListRequest {
	if x, ok := x.GetContent().(*Main_StorageListRequest); ok {
		return x.StorageListRequest
	}
	return nil
}

func (x *Main) GetStorageListResponse() *storage.ListResponse {
	if x, ok := x.GetContent().(*Main_StorageListResponse); ok {
		return x.StorageListResponse
	}
	return nil
}

func (x *Main) GetStorageReadRequest() *storage.ReadRequest {
	if x, ok := x.GetContent().(*Main_StorageReadRequest); ok {
		return x.StorageReadRequest
	}
	return nil
}

func (x *Main) GetStorageReadResponse() *storage.ReadResponse {
	if x, ok := x.GetContent().(*Main_StorageReadResponse); ok {
		return x.StorageReadResponse
	}
	return nil
}

func (x *Main) GetStorageWriteRequest() *storage.WriteRequest {
	if x, ok := x.GetContent().(*Main_StorageWriteRequest); ok {
		return x.StorageWriteRequest
	}
	return nil
}

func (x *Main) GetStorageDeleteRequest() *storage.DeleteRequest {
	if x, ok := x.GetContent().(*Main_StorageDeleteRequest); ok {
		return x.StorageDeleteRequest
	}
	return nil
}

func (x *Main) GetStorageMkdirRequest() *storage.MkdirRequest {
	if x, ok := x.GetContent().(*Main_StorageMkdirRequest); ok {
		return x.StorageMkdirRequest
	}
	return nil
}

func (x *Main) GetStorageMd5SumRequest() *storage.Md5SumRequest {
	if x, ok := x.GetContent().(*Main_StorageMd5SumRequest); ok {
		return x.StorageMd5SumRequest
	}
	return nil
}

func (x *Main) GetStorageMd5SumResponse() *storage.Md5SumResponse {
	if x, ok := x.GetContent().(*Main_StorageMd5SumResponse); ok {
		return x.StorageMd5SumResponse
	}
	return nil
}

func (x *Main) GetStorageRenameRequest() *storage.RenameRequest {
	if x, ok := x.GetContent().(*Main_StorageRenameRequest); ok {
		return x.StorageRenameRequest
	}
	return nil
}

func (x *Main) GetStorageBackupCreateRequest() *storage.BackupCreateRequest {
	if x, ok := x.GetContent().(*Main_StorageBackupCreateRequest); ok {
		return x.StorageBackupCreateRequest
	}
	return nil
}

func (x *Main) GetStorageBackupRestoreRequest() *storage.BackupRestoreRequest {
	if x, ok := x.GetContent().(*Main_StorageBackupRestoreRequest); ok {
		return x.StorageBackupRestoreRequest
	}
	return nil
}

func (x *Main) GetStorageTarExtractRequest() *storage.TarExtractRequest {
	if x, ok := x.GetContent().(*Main_StorageTarExtractRequest); ok {
		return x.StorageTarExtractRequest
	}
	return nil
}

func (x *Main) GetAppStartRequest() *StartRequest {
	if x, ok := x.GetContent().(*Main_AppStartRequest); ok {
		return x.AppStartRequest
	}
	return nil
}

func (x *Main) GetAppLockStatusRequest() *LockStatusRequest {
	if x, ok := x.GetContent().(*Main_AppLockStatusRequest); ok {
		return x.AppLockStatusRequest
	}
	return nil
}

func (x *Main) GetAppLockStatusResponse() *LockStatusResponse {
	if x, ok := x.GetContent().(*Main_AppLockStatusResponse); ok {
		return x.AppLockStatusResponse
	}
	return nil
}

func (x *Main) GetAppExitRequest() *AppExitRequest {
	if x, ok := x.GetContent().(*Main_AppExitRequest); ok {
		return x.AppExitRequest
	}
	return nil
}

func (x *Main) GetAppLoadFileRequest() *AppLoadFileRequest {
	if x, ok := x.GetContent().(*Main_AppLoadFileRequest); ok {
		return x.AppLoadFileRequest
	}
	return nil
}

func (x *Main) GetAppButtonPressRequest() *AppButtonPressRequest {
	if x, ok := x.GetContent().(*Main_AppButtonPressRequest); ok {
		return x.AppButtonPressRequest
	}
	return nil
}

func (x *Main) GetAppButtonReleaseRequest() *AppButtonReleaseRequest {
	if x, ok := x.GetContent().(*Main_AppButtonReleaseRequest); ok {
		return x.AppButtonReleaseRequest
	}
	return nil
}

func (x *Main) GetAppGetErrorRequest() *GetErrorRequest {
	if x, ok := x.GetContent().(*Main_AppGetErrorRequest); ok {
		return x.AppGetErrorRequest
	}
	return nil
}

func (x *Main) GetAppGetErrorResponse() *GetErrorResponse {
	if x, ok := x.GetContent().(*Main_AppGetErrorResponse); ok {
		return x.AppGetErrorResponse
	}
	return nil
}

func (x *Main) GetAppDataExchangeRequest() *DataExchangeRequest {
	if x, ok := x.GetContent().(*Main_AppDataExchangeRequest); ok {
		return x.AppDataExchangeRequest
	}
	return nil
}

func (x *Main) GetGuiStartScreenStreamRequest() *gui.StartScreenStreamRequest {
	if x, ok := x.GetContent().(*Main_GuiStartScreenStreamRequest); ok {
		return x.GuiStartScreenStreamRequest
	}
	return nil
}

func (x *Main) GetGuiStopScreenStreamRequest() *gui.StopScreenStreamRequest {
	if x, ok := x.GetContent().(*Main_GuiStopScreenStreamRequest); ok {
		return x.GuiStopScreenStreamRequest
	}
	return nil
}

func (x *Main) GetGuiScreenFrame() *gui.ScreenFrame {
	if x, ok := x.GetContent().(*Main_GuiScreenFrame); ok {
		return x.GuiScreenFrame
	}
	return nil
}

func (x *Main) GetGuiSendInputEventRequest() *gui.SendInputEventRequest {
	if x, ok := x.GetContent().(*Main_GuiSendInputEventRequest); ok {
		return x.GuiSendInputEventRequest
	}
	return nil
}

func (x *Main) GetGuiStartVirtualDisplayRequest() *gui.StartVirtualDisplayRequest {
	if x, ok := x.GetContent().(*Main_GuiStartVirtualDisplayRequest); ok {
		return x.GuiStartVirtualDisplayRequest
	}
	return nil
}

func (x *Main) GetGuiStopVirtualDisplayRequest() *gui.StopVirtualDisplayRequest {
	if x, ok := x.GetContent().(*Main_GuiStopVirtualDisplayRequest); ok {
		return x.GuiStopVirtualDisplayRequest
	}
	return nil
}

func (x *Main) GetGpioSetPinMode() *gpio.SetPinMode {
	if x, ok := x.GetContent().(*Main_GpioSetPinMode); ok {
		return x.GpioSetPinMode
	}
	return nil
}

func (x *Main) GetGpioSetInputPull() *gpio.SetInputPull {
	if x, ok := x.GetContent().(*Main_GpioSetInputPull); ok {
		return x.GpioSetInputPull
	}
	return nil
}

func (x *Main) GetGpioGetPinMode() *gpio.GetPinMode {
	if x, ok := x.GetContent().(*Main_GpioGetPinMode); ok {
		return x.GpioGetPinMode
	}
	return nil
}

func (x *Main) GetGpioGetPinModeResponse() *gpio.GetPinModeResponse {
	if x, ok := x.GetContent().(*Main_GpioGetPinModeResponse); ok {
		return x.GpioGetPinModeResponse
	}
	return nil
}

func (x *Main) GetGpioReadPin() *gpio.ReadPin {
	if x, ok := x.GetContent().(*Main_GpioReadPin); ok {
		return x.GpioReadPin
	}
	return nil
}

func (x *Main) GetGpioReadPinResponse() *gpio.ReadPinResponse {
	if x, ok := x.GetContent().(*Main_GpioReadPinResponse); ok {
		return x.GpioReadPinResponse
	}
	return nil
}

func (x *Main) GetGpioWritePin() *gpio.WritePin {
	if x, ok := x.GetContent().(*Main_GpioWritePin); ok {
		return x.GpioWritePin
	}
	return nil
}

func (x *Main) GetGpioGetOtgMode() *gpio.GetOtgMode {
	if x, ok := x.GetContent().(*Main_GpioGetOtgMode); ok {
		return x.GpioGetOtgMode
	}
	return nil
}

func (x *Main) GetGpioGetOtgModeResponse() *gpio.GetOtgModeResponse {
	if x, ok := x.GetContent().(*Main_GpioGetOtgModeResponse); ok {
		return x.GpioGetOtgModeResponse
	}
	return nil
}

func (x *Main) GetGpioSetOtgMode() *gpio.SetOtgMode {
	if x, ok := x.GetContent().(*Main_GpioSetOtgMode); ok {
		return x.GpioSetOtgMode
	}
	return nil
}

func (x *Main) GetAppStateResponse() *AppStateResponse {
	if x, ok := x.GetContent().(*Main_AppStateResponse); ok {
		return x.AppStateResponse
	}
	return nil
}

func (x *Main) GetPropertyGetRequest() *property.GetRequest {
	if x, ok := x.GetContent().(*Main_PropertyGetRequest); ok {
		return x.PropertyGetRequest
	}
	return nil
}

func (x *Main) GetPropertyGetResponse() *property.GetResponse {
	if x, ok := x.GetContent().(*Main_PropertyGetResponse); ok {
		return x.PropertyGetResponse
	}
	return nil
}

func (x *Main) GetDesktopIsLockedRequest() *desktop.IsLockedRequest {
	if x, ok := x.GetContent().(*Main_DesktopIsLockedRequest); ok {
		return x.DesktopIsLockedRequest
	}
	return nil
}

func (x *Main) GetDesktopUnlockRequest() *desktop.UnlockRequest {
	if x, ok := x.GetContent().(*Main_DesktopUnlockRequest); ok {
		return x.DesktopUnlockRequest
	}
	return nil
}

func (x *Main) GetDesktopStatusSubscribeRequest() *desktop.StatusSubscribeRequest {
	if x, ok := x.GetContent().(*Main_DesktopStatusSubscribeRequest); ok {
		return x.DesktopStatusSubscribeRequest
	}
	return nil
}

func (x *Main) GetDesktopStatusUnsubscribeRequest() *desktop.StatusUnsubscribeRequest {
	if x, ok := x.GetContent().(*Main_DesktopStatusUnsubscribeRequest); ok {
		return x.DesktopStatusUnsubscribeRequest
	}
	return nil
}

func (x *Main) GetDesktopStatus() *desktop.Status {
	if x, ok := x.GetContent().(*Main_DesktopStatus); ok {
		return x.DesktopStatus
	}
	return nil
}

type isMain_Content interface {
	isMain_Content()
}

type Main_Empty struct {
	Empty *Empty `protobuf:"bytes,4,opt,name=empty,proto3,oneof"`
}

type Main_StopSession struct {
	StopSession *StopSession `protobuf:"bytes,19,opt,name=stop_session,json=stopSession,proto3,oneof"`
}

type Main_SystemPingRequest struct {
	SystemPingRequest *system.PingRequest `protobuf:"bytes,5,opt,name=system_ping_request,json=systemPingRequest,proto3,oneof"`
}

type Main_SystemPingResponse struct {
	SystemPingResponse *system.PingResponse `protobuf:"bytes,6,opt,name=system_ping_response,json=systemPingResponse,proto3,oneof"`
}

type Main_SystemRebootRequest struct {
	SystemRebootRequest *system.RebootRequest `protobuf:"bytes,31,opt,name=system_reboot_request,json=systemRebootRequest,proto3,oneof"`
}

type Main_SystemDeviceInfoRequest struct {
	SystemDeviceInfoRequest *system.DeviceInfoRequest `protobuf:"bytes,32,opt,name=system_device_info_request,json=systemDeviceInfoRequest,proto3,oneof"`
}

type Main_SystemDeviceInfoResponse struct {
	SystemDeviceInfoResponse *system.DeviceInfoResponse `protobuf:"bytes,33,opt,name=system_device_info_response,json=systemDeviceInfoResponse,proto3,oneof"`
}

type Main_SystemFactoryResetRequest struct {
	SystemFactoryResetRequest *system.FactoryResetRequest `protobuf:"bytes,34,opt,name=system_factory_reset_request,json=systemFactoryResetRequest,proto3,oneof"`
}

type Main_SystemGetDatetimeRequest struct {
	SystemGetDatetimeRequest *system.GetDateTimeRequest `protobuf:"bytes,35,opt,name=system_get_datetime_request,json=systemGetDatetimeRequest,proto3,oneof"`
}

type Main_SystemGetDatetimeResponse struct {
	SystemGetDatetimeResponse *system.GetDateTimeResponse `protobuf:"bytes,36,opt,name=system_get_datetime_response,json=systemGetDatetimeResponse,proto3,oneof"`
}

type Main_SystemSetDatetimeRequest struct {
	SystemSetDatetimeRequest *system.SetDateTimeRequest `protobuf:"bytes,37,opt,name=system_set_datetime_request,json=systemSetDatetimeRequest,proto3,oneof"`
}

type Main_SystemPlayAudiovisualAlertRequest struct {
	SystemPlayAudiovisualAlertRequest *system.PlayAudiovisualAlertRequest `protobuf:"bytes,38,opt,name=system_play_audiovisual_alert_request,json=systemPlayAudiovisualAlertRequest,proto3,oneof"`
}

type Main_SystemProtobufVersionRequest struct {
	SystemProtobufVersionRequest *system.ProtobufVersionRequest `protobuf:"bytes,39,opt,name=system_protobuf_version_request,json=systemProtobufVersionRequest,proto3,oneof"`
}

type Main_SystemProtobufVersionResponse struct {
	SystemProtobufVersionResponse *system.ProtobufVersionResponse `protobuf:"bytes,40,opt,name=system_protobuf_version_response,json=systemProtobufVersionResponse,proto3,oneof"`
}

type Main_SystemUpdateRequest struct {
	SystemUpdateRequest *system.UpdateRequest `protobuf:"bytes,41,opt,name=system_update_request,json=systemUpdateRequest,proto3,oneof"`
}

type Main_SystemUpdateResponse struct {
	SystemUpdateResponse *system.UpdateResponse `protobuf:"bytes,46,opt,name=system_update_response,json=systemUpdateResponse,proto3,oneof"`
}

type Main_SystemPowerInfoRequest struct {
	SystemPowerInfoRequest *system.PowerInfoRequest `protobuf:"bytes,44,opt,name=system_power_info_request,json=systemPowerInfoRequest,proto3,oneof"`
}

type Main_SystemPowerInfoResponse struct {
	SystemPowerInfoResponse *system.PowerInfoResponse `protobuf:"bytes,45,opt,name=system_power_info_response,json=systemPowerInfoResponse,proto3,oneof"`
}

type Main_StorageInfoRequest struct {
	StorageInfoRequest *storage.InfoRequest `protobuf:"bytes,28,opt,name=storage_info_request,json=storageInfoRequest,proto3,oneof"`
}

type Main_StorageInfoResponse struct {
	StorageInfoResponse *storage.InfoResponse `protobuf:"bytes,29,opt,name=storage_info_response,json=storageInfoResponse,proto3,oneof"`
}

type Main_StorageTimestampRequest struct {
	StorageTimestampRequest *storage.TimestampRequest `protobuf:"bytes,59,opt,name=storage_timestamp_request,json=storageTimestampRequest,proto3,oneof"`
}

type Main_StorageTimestampResponse struct {
	StorageTimestampResponse *storage.TimestampResponse `protobuf:"bytes,60,opt,name=storage_timestamp_response,json=storageTimestampResponse,proto3,oneof"`
}

type Main_StorageStatRequest struct {
	StorageStatRequest *storage.StatRequest `protobuf:"bytes,24,opt,name=storage_stat_request,json=storageStatRequest,proto3,oneof"`
}

type Main_StorageStatResponse struct {
	StorageStatResponse *storage.StatResponse `protobuf:"bytes,25,opt,name=storage_stat_response,json=storageStatResponse,proto3,oneof"`
}

type Main_StorageListRequest struct {
	StorageListRequest *storage.ListRequest `protobuf:"bytes,7,opt,name=storage_list_request,json=storageListRequest,proto3,oneof"`
}

type Main_StorageListResponse struct {
	StorageListResponse *storage.ListResponse `protobuf:"bytes,8,opt,name=storage_list_response,json=storageListResponse,proto3,oneof"`
}

type Main_StorageReadRequest struct {
	StorageReadRequest *storage.ReadRequest `protobuf:"bytes,9,opt,name=storage_read_request,json=storageReadRequest,proto3,oneof"`
}

type Main_StorageReadResponse struct {
	StorageReadResponse *storage.ReadResponse `protobuf:"bytes,10,opt,name=storage_read_response,json=storageReadResponse,proto3,oneof"`
}

type Main_StorageWriteRequest struct {
	StorageWriteRequest *storage.WriteRequest `protobuf:"bytes,11,opt,name=storage_write_request,json=storageWriteRequest,proto3,oneof"`
}

type Main_StorageDeleteRequest struct {
	StorageDeleteRequest *storage.DeleteRequest `protobuf:"bytes,12,opt,name=storage_delete_request,json=storageDeleteRequest,proto3,oneof"`
}

type Main_StorageMkdirRequest struct {
	StorageMkdirRequest *storage.MkdirRequest `protobuf:"bytes,13,opt,name=storage_mkdir_request,json=storageMkdirRequest,proto3,oneof"`
}

type Main_StorageMd5SumRequest struct {
	StorageMd5SumRequest *storage.Md5SumRequest `protobuf:"bytes,14,opt,name=storage_md5sum_request,json=storageMd5sumRequest,proto3,oneof"`
}

type Main_StorageMd5SumResponse struct {
	StorageMd5SumResponse *storage.Md5SumResponse `protobuf:"bytes,15,opt,name=storage_md5sum_response,json=storageMd5sumResponse,proto3,oneof"`
}

type Main_StorageRenameRequest struct {
	StorageRenameRequest *storage.RenameRequest `protobuf:"bytes,30,opt,name=storage_rename_request,json=storageRenameRequest,proto3,oneof"`
}

type Main_StorageBackupCreateRequest struct {
	StorageBackupCreateRequest *storage.BackupCreateRequest `protobuf:"bytes,42,opt,name=storage_backup_create_request,json=storageBackupCreateRequest,proto3,oneof"`
}

type Main_StorageBackupRestoreRequest struct {
	StorageBackupRestoreRequest *storage.BackupRestoreRequest `protobuf:"bytes,43,opt,name=storage_backup_restore_request,json=storageBackupRestoreRequest,proto3,oneof"`
}

type Main_StorageTarExtractRequest struct {
	StorageTarExtractRequest *storage.TarExtractRequest `protobuf:"bytes,71,opt,name=storage_tar_extract_request,json=storageTarExtractRequest,proto3,oneof"`
}

type Main_AppStartRequest struct {
	AppStartRequest *StartRequest `protobuf:"bytes,16,opt,name=app_start_request,json=appStartRequest,proto3,oneof"`
}

type Main_AppLockStatusRequest struct {
	AppLockStatusRequest *LockStatusRequest `protobuf:"bytes,17,opt,name=app_lock_status_request,json=appLockStatusRequest,proto3,oneof"`
}

type Main_AppLockStatusResponse struct {
	AppLockStatusResponse *LockStatusResponse `protobuf:"bytes,18,opt,name=app_lock_status_response,json=appLockStatusResponse,proto3,oneof"`
}

type Main_AppExitRequest struct {
	AppExitRequest *AppExitRequest `protobuf:"bytes,47,opt,name=app_exit_request,json=appExitRequest,proto3,oneof"`
}

type Main_AppLoadFileRequest struct {
	AppLoadFileRequest *AppLoadFileRequest `protobuf:"bytes,48,opt,name=app_load_file_request,json=appLoadFileRequest,proto3,oneof"`
}

type Main_AppButtonPressRequest struct {
	AppButtonPressRequest *AppButtonPressRequest `protobuf:"bytes,49,opt,name=app_button_press_request,json=appButtonPressRequest,proto3,oneof"`
}

type Main_AppButtonReleaseRequest struct {
	AppButtonReleaseRequest *AppButtonReleaseRequest `protobuf:"bytes,50,opt,name=app_button_release_request,json=appButtonReleaseRequest,proto3,oneof"`
}

type Main_AppGetErrorRequest struct {
	AppGetErrorRequest *GetErrorRequest `protobuf:"bytes,63,opt,name=app_get_error_request,json=appGetErrorRequest,proto3,oneof"`
}

type Main_AppGetErrorResponse struct {
	AppGetErrorResponse *GetErrorResponse `protobuf:"bytes,64,opt,name=app_get_error_response,json=appGetErrorResponse,proto3,oneof"`
}

type Main_AppDataExchangeRequest struct {
	AppDataExchangeRequest *DataExchangeRequest `protobuf:"bytes,65,opt,name=app_data_exchange_request,json=appDataExchangeRequest,proto3,oneof"`
}

type Main_GuiStartScreenStreamRequest struct {
	GuiStartScreenStreamRequest *gui.StartScreenStreamRequest `protobuf:"bytes,20,opt,name=gui_start_screen_stream_request,json=guiStartScreenStreamRequest,proto3,oneof"`
}

type Main_GuiStopScreenStreamRequest struct {
	GuiStopScreenStreamRequest *gui.StopScreenStreamRequest `protobuf:"bytes,21,opt,name=gui_stop_screen_stream_request,json=guiStopScreenStreamRequest,proto3,oneof"`
}

type Main_GuiScreenFrame struct {
	GuiScreenFrame *gui.ScreenFrame `protobuf:"bytes,22,opt,name=gui_screen_frame,json=guiScreenFrame,proto3,oneof"`
}

type Main_GuiSendInputEventRequest struct {
	GuiSendInputEventRequest *gui.SendInputEventRequest `protobuf:"bytes,23,opt,name=gui_send_input_event_request,json=guiSendInputEventRequest,proto3,oneof"`
}

type Main_GuiStartVirtualDisplayRequest struct {
	GuiStartVirtualDisplayRequest *gui.StartVirtualDisplayRequest `protobuf:"bytes,26,opt,name=gui_start_virtual_display_request,json=guiStartVirtualDisplayRequest,proto3,oneof"`
}

type Main_GuiStopVirtualDisplayRequest struct {
	GuiStopVirtualDisplayRequest *gui.StopVirtualDisplayRequest `protobuf:"bytes,27,opt,name=gui_stop_virtual_display_request,json=guiStopVirtualDisplayRequest,proto3,oneof"`
}

type Main_GpioSetPinMode struct {
	GpioSetPinMode *gpio.SetPinMode `protobuf:"bytes,51,opt,name=gpio_set_pin_mode,json=gpioSetPinMode,proto3,oneof"`
}

type Main_GpioSetInputPull struct {
	GpioSetInputPull *gpio.SetInputPull `protobuf:"bytes,52,opt,name=gpio_set_input_pull,json=gpioSetInputPull,proto3,oneof"`
}

type Main_GpioGetPinMode struct {
	GpioGetPinMode *gpio.GetPinMode `protobuf:"bytes,53,opt,name=gpio_get_pin_mode,json=gpioGetPinMode,proto3,oneof"`
}

type Main_GpioGetPinModeResponse struct {
	GpioGetPinModeResponse *gpio.GetPinModeResponse `protobuf:"bytes,54,opt,name=gpio_get_pin_mode_response,json=gpioGetPinModeResponse,proto3,oneof"`
}

type Main_GpioReadPin struct {
	GpioReadPin *gpio.ReadPin `protobuf:"bytes,55,opt,name=gpio_read_pin,json=gpioReadPin,proto3,oneof"`
}

type Main_GpioReadPinResponse struct {
	GpioReadPinResponse *gpio.ReadPinResponse `protobuf:"bytes,56,opt,name=gpio_read_pin_response,json=gpioReadPinResponse,proto3,oneof"`
}

type Main_GpioWritePin struct {
	GpioWritePin *gpio.WritePin `protobuf:"bytes,57,opt,name=gpio_write_pin,json=gpioWritePin,proto3,oneof"`
}

type Main_GpioGetOtgMode struct {
	GpioGetOtgMode *gpio.GetOtgMode `protobuf:"bytes,72,opt,name=gpio_get_otg_mode,json=gpioGetOtgMode,proto3,oneof"`
}

type Main_GpioGetOtgModeResponse struct {
	GpioGetOtgModeResponse *gpio.GetOtgModeResponse `protobuf:"bytes,73,opt,name=gpio_get_otg_mode_response,json=gpioGetOtgModeResponse,proto3,oneof"`
}

type Main_GpioSetOtgMode struct {
	GpioSetOtgMode *gpio.SetOtgMode `protobuf:"bytes,74,opt,name=gpio_set_otg_mode,json=gpioSetOtgMode,proto3,oneof"`
}

type Main_AppStateResponse struct {
	AppStateResponse *AppStateResponse `protobuf:"bytes,58,opt,name=app_state_response,json=appStateResponse,proto3,oneof"`
}

type Main_PropertyGetRequest struct {
	PropertyGetRequest *property.GetRequest `protobuf:"bytes,61,opt,name=property_get_request,json=propertyGetRequest,proto3,oneof"`
}

type Main_PropertyGetResponse struct {
	PropertyGetResponse *property.GetResponse `protobuf:"bytes,62,opt,name=property_get_response,json=propertyGetResponse,proto3,oneof"`
}

type Main_DesktopIsLockedRequest struct {
	DesktopIsLockedRequest *desktop.IsLockedRequest `protobuf:"bytes,66,opt,name=desktop_is_locked_request,json=desktopIsLockedRequest,proto3,oneof"`
}

type Main_DesktopUnlockRequest struct {
	DesktopUnlockRequest *desktop.UnlockRequest `protobuf:"bytes,67,opt,name=desktop_unlock_request,json=desktopUnlockRequest,proto3,oneof"`
}

type Main_DesktopStatusSubscribeRequest struct {
	DesktopStatusSubscribeRequest *desktop.StatusSubscribeRequest `protobuf:"bytes,68,opt,name=desktop_status_subscribe_request,json=desktopStatusSubscribeRequest,proto3,oneof"`
}

type Main_DesktopStatusUnsubscribeRequest struct {
	DesktopStatusUnsubscribeRequest *desktop.StatusUnsubscribeRequest `protobuf:"bytes,69,opt,name=desktop_status_unsubscribe_request,json=desktopStatusUnsubscribeRequest,proto3,oneof"`
}

type Main_DesktopStatus struct {
	DesktopStatus *desktop.Status `protobuf:"bytes,70,opt,name=desktop_status,json=desktopStatus,proto3,oneof"`
}

func (*Main_Empty) isMain_Content() {}

func (*Main_StopSession) isMain_Content() {}

func (*Main_SystemPingRequest) isMain_Content() {}

func (*Main_SystemPingResponse) isMain_Content() {}

func (*Main_SystemRebootRequest) isMain_Content() {}

func (*Main_SystemDeviceInfoRequest) isMain_Content() {}

func (*Main_SystemDeviceInfoResponse) isMain_Content() {}

func (*Main_SystemFactoryResetRequest) isMain_Content() {}

func (*Main_SystemGetDatetimeRequest) isMain_Content() {}

func (*Main_SystemGetDatetimeResponse) isMain_Content() {}

func (*Main_SystemSetDatetimeRequest) isMain_Content() {}

func (*Main_SystemPlayAudiovisualAlertRequest) isMain_Content() {}

func (*Main_SystemProtobufVersionRequest) isMain_Content() {}

func (*Main_SystemProtobufVersionResponse) isMain_Content() {}

func (*Main_SystemUpdateRequest) isMain_Content() {}

func (*Main_SystemUpdateResponse) isMain_Content() {}

func (*Main_SystemPowerInfoRequest) isMain_Content() {}

func (*Main_SystemPowerInfoResponse) isMain_Content() {}

func (*Main_StorageInfoRequest) isMain_Content() {}

func (*Main_StorageInfoResponse) isMain_Content() {}

func (*Main_StorageTimestampRequest) isMain_Content() {}

func (*Main_StorageTimestampResponse) isMain_Content() {}

func (*Main_StorageStatRequest) isMain_Content() {}

func (*Main_StorageStatResponse) isMain_Content() {}

func (*Main_StorageListRequest) isMain_Content() {}

func (*Main_StorageListResponse) isMain_Content() {}

func (*Main_StorageReadRequest) isMain_Content() {}

func (*Main_StorageReadResponse) isMain_Content() {}

func (*Main_StorageWriteRequest) isMain_Content() {}

func (*Main_StorageDeleteRequest) isMain_Content() {}

func (*Main_StorageMkdirRequest) isMain_Content() {}

func (*Main_StorageMd5SumRequest) isMain_Content() {}

func (*Main_StorageMd5SumResponse) isMain_Content() {}

func (*Main_StorageRenameRequest) isMain_Content() {}

func (*Main_StorageBackupCreateRequest) isMain_Content() {}

func (*Main_StorageBackupRestoreRequest) isMain_Content() {}

func (*Main_StorageTarExtractRequest) isMain_Content() {}

func (*Main_AppStartRequest) isMain_Content() {}

func (*Main_AppLockStatusRequest) isMain_Content() {}

func (*Main_AppLockStatusResponse) isMain_Content() {}

func (*Main_AppExitRequest) isMain_Content() {}

func (*Main_AppLoadFileRequest) isMain_Content() {}

func (*Main_AppButtonPressRequest) isMain_Content() {}

func (*Main_AppButtonReleaseRequest) isMain_Content() {}

func (*Main_AppGetErrorRequest) isMain_Content() {}

func (*Main_AppGetErrorResponse) isMain_Content() {}

func (*Main_AppDataExchangeRequest) isMain_Content() {}

func (*Main_GuiStartScreenStreamRequest) isMain_Content() {}

func (*Main_GuiStopScreenStreamRequest) isMain_Content() {}

func (*Main_GuiScreenFrame) isMain_Content() {}

func (*Main_GuiSendInputEventRequest) isMain_Content() {}

func (*Main_GuiStartVirtualDisplayRequest) isMain_Content() {}

func (*Main_GuiStopVirtualDisplayRequest) isMain_Content() {}

func (*Main_GpioSetPinMode) isMain_Content() {}

func (*Main_GpioSetInputPull) isMain_Content() {}

func (*Main_GpioGetPinMode) isMain_Content() {}

func (*Main_GpioGetPinModeResponse) isMain_Content() {}

func (*Main_GpioReadPin) isMain_Content() {}

func (*Main_GpioReadPinResponse) isMain_Content() {}

func (*Main_GpioWritePin) isMain_Content() {}

func (*Main_GpioGetOtgMode) isMain_Content() {}

func (*Main_GpioGetOtgModeResponse) isMain_Content() {}

func (*Main_GpioSetOtgMode) isMain_Content() {}

func (*Main_AppStateResponse) isMain_Content() {}

func (*Main_PropertyGetRequest) isMain_Content() {}

func (*Main_PropertyGetResponse) isMain_Content() {}

func (*Main_DesktopIsLockedRequest) isMain_Content() {}

func (*Main_DesktopUnlockRequest) isMain_Content() {}

func (*Main_DesktopStatusSubscribeRequest) isMain_Content() {}

func (*Main_DesktopStatusUnsubscribeRequest) isMain_Content() {}

func (*Main_DesktopStatus) isMain_Content() {}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode []byte         `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Bands       []*Region_Band `protobuf:"bytes,2,rep,name=bands,proto3" json:"bands,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{3}
}

func (x *Region) GetCountryCode() []byte {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *Region) GetBands() []*Region_Band {
	if x != nil {
		return x.Bands
	}
	return nil
}

type Region_Band struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End        uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	PowerLimit int32  `protobuf:"varint,3,opt,name=power_limit,json=powerLimit,proto3" json:"power_limit,omitempty"`
	DutyCycle  uint32 `protobuf:"varint,4,opt,name=duty_cycle,json=dutyCycle,proto3" json:"duty_cycle,omitempty"`
}

func (x *Region_Band) Reset() {
	*x = Region_Band{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region_Band) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region_Band) ProtoMessage() {}

func (x *Region_Band) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region_Band.ProtoReflect.Descriptor instead.
func (*Region_Band) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Region_Band) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Region_Band) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Region_Band) GetPowerLimit() int32 {
	if x != nil {
		return x.PowerLimit
	}
	return 0
}

func (x *Region_Band) GetDutyCycle() uint32 {
	if x != nil {
		return x.DutyCycle
	}
	return 0
}

var File_flipper_proto protoreflect.FileDescriptor

var file_flipper_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x50, 0x42, 0x1a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x67, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x67, 0x70, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8c, 0x30, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x42, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b,
	0x0a, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x1c, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e,
	0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61,
	0x0a, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7a, 0x0a, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x21, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a,
	0x1f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x20, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x42, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x6b, 0x64, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x64, 0x35, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x64, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x61, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x42, 0x5f,
	0x41, 0x70, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x42, 0x5f, 0x41,
	0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70,
	0x70, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x61, 0x70, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x41,
	0x70, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a,
	0x1a, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x61, 0x70, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x15, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50,
	0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x47, 0x65, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x16, 0x61,
	0x70, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42,
	0x5f, 0x41, 0x70, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x47, 0x65, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x19,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16,
	0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x1f, 0x67, 0x75, 0x69, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x75, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x65, 0x0a, 0x1e, 0x67, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x75, 0x69,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x67, 0x75, 0x69, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x1c, 0x67, 0x75, 0x69, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x18, 0x67, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x21, 0x67, 0x75, 0x69,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x75, 0x69, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x20, 0x67, 0x75, 0x69,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x75, 0x69, 0x53, 0x74, 0x6f,
	0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x70, 0x69, 0x6f, 0x53, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x67, 0x70, 0x69, 0x6f,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10,
	0x67, 0x70, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x75, 0x6c, 0x6c,
	0x12, 0x40, 0x0a, 0x11, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42,
	0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x70, 0x69, 0x6f, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x70, 0x69, 0x6f, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0d, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x70, 0x69, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x67, 0x70, 0x69, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x50, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x70, 0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x69,
	0x6e, 0x12, 0x40, 0x0a, 0x11, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x74,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50,
	0x42, 0x5f, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x70, 0x69, 0x6f, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x6f, 0x74, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x70, 0x69,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x70, 0x69, 0x6f, 0x47, 0x65, 0x74, 0x4f,
	0x74, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x11, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x74, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42, 0x5f, 0x47,
	0x70, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x74, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x67, 0x70, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x4f, 0x74, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50,
	0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x42, 0x5f,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x50, 0x42, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x22, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x50, 0x42, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x50, 0x42, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xc2, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x50, 0x42, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x05,
	0x62, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x6e, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x74, 0x79,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x2a, 0xd6, 0x05, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x0f, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0d,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x12, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x43,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x14, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x3a, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x3b, 0x42, 0x1d,
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flipper_proto_rawDescOnce sync.Once
	file_flipper_proto_rawDescData = file_flipper_proto_rawDesc
)

func file_flipper_proto_rawDescGZIP() []byte {
	file_flipper_proto_rawDescOnce.Do(func() {
		file_flipper_proto_rawDescData = protoimpl.X.CompressGZIP(file_flipper_proto_rawDescData)
	})
	return file_flipper_proto_rawDescData
}

var file_flipper_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flipper_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_flipper_proto_goTypes = []interface{}{
	(CommandStatus)(0),                         // 0: PB.CommandStatus
	(*Empty)(nil),                              // 1: PB.Empty
	(*StopSession)(nil),                        // 2: PB.StopSession
	(*Main)(nil),                               // 3: PB.Main
	(*Region)(nil),                             // 4: PB.Region
	(*Region_Band)(nil),                        // 5: PB.Region.Band
	(*system.PingRequest)(nil),                 // 6: PB_System.PingRequest
	(*system.PingResponse)(nil),                // 7: PB_System.PingResponse
	(*system.RebootRequest)(nil),               // 8: PB_System.RebootRequest
	(*system.DeviceInfoRequest)(nil),           // 9: PB_System.DeviceInfoRequest
	(*system.DeviceInfoResponse)(nil),          // 10: PB_System.DeviceInfoResponse
	(*system.FactoryResetRequest)(nil),         // 11: PB_System.FactoryResetRequest
	(*system.GetDateTimeRequest)(nil),          // 12: PB_System.GetDateTimeRequest
	(*system.GetDateTimeResponse)(nil),         // 13: PB_System.GetDateTimeResponse
	(*system.SetDateTimeRequest)(nil),          // 14: PB_System.SetDateTimeRequest
	(*system.PlayAudiovisualAlertRequest)(nil), // 15: PB_System.PlayAudiovisualAlertRequest
	(*system.ProtobufVersionRequest)(nil),      // 16: PB_System.ProtobufVersionRequest
	(*system.ProtobufVersionResponse)(nil),     // 17: PB_System.ProtobufVersionResponse
	(*system.UpdateRequest)(nil),               // 18: PB_System.UpdateRequest
	(*system.UpdateResponse)(nil),              // 19: PB_System.UpdateResponse
	(*system.PowerInfoRequest)(nil),            // 20: PB_System.PowerInfoRequest
	(*system.PowerInfoResponse)(nil),           // 21: PB_System.PowerInfoResponse
	(*storage.InfoRequest)(nil),                // 22: PB_Storage.InfoRequest
	(*storage.InfoResponse)(nil),               // 23: PB_Storage.InfoResponse
	(*storage.TimestampRequest)(nil),           // 24: PB_Storage.TimestampRequest
	(*storage.TimestampResponse)(nil),          // 25: PB_Storage.TimestampResponse
	(*storage.StatRequest)(nil),                // 26: PB_Storage.StatRequest
	(*storage.StatResponse)(nil),               // 27: PB_Storage.StatResponse
	(*storage.ListRequest)(nil),                // 28: PB_Storage.ListRequest
	(*storage.ListResponse)(nil),               // 29: PB_Storage.ListResponse
	(*storage.ReadRequest)(nil),                // 30: PB_Storage.ReadRequest
	(*storage.ReadResponse)(nil),               // 31: PB_Storage.ReadResponse
	(*storage.WriteRequest)(nil),               // 32: PB_Storage.WriteRequest
	(*storage.DeleteRequest)(nil),              // 33: PB_Storage.DeleteRequest
	(*storage.MkdirRequest)(nil),               // 34: PB_Storage.MkdirRequest
	(*storage.Md5SumRequest)(nil),              // 35: PB_Storage.Md5sumRequest
	(*storage.Md5SumResponse)(nil),             // 36: PB_Storage.Md5sumResponse
	(*storage.RenameRequest)(nil),              // 37: PB_Storage.RenameRequest
	(*storage.BackupCreateRequest)(nil),        // 38: PB_Storage.BackupCreateRequest
	(*storage.BackupRestoreRequest)(nil),       // 39: PB_Storage.BackupRestoreRequest
	(*storage.TarExtractRequest)(nil),          // 40: PB_Storage.TarExtractRequest
	(*StartRequest)(nil),                       // 41: PB_App.StartRequest
	(*LockStatusRequest)(nil),                  // 42: PB_App.LockStatusRequest
	(*LockStatusResponse)(nil),                 // 43: PB_App.LockStatusResponse
	(*AppExitRequest)(nil),                     // 44: PB_App.AppExitRequest
	(*AppLoadFileRequest)(nil),                 // 45: PB_App.AppLoadFileRequest
	(*AppButtonPressRequest)(nil),              // 46: PB_App.AppButtonPressRequest
	(*AppButtonReleaseRequest)(nil),            // 47: PB_App.AppButtonReleaseRequest
	(*GetErrorRequest)(nil),                    // 48: PB_App.GetErrorRequest
	(*GetErrorResponse)(nil),                   // 49: PB_App.GetErrorResponse
	(*DataExchangeRequest)(nil),                // 50: PB_App.DataExchangeRequest
	(*gui.StartScreenStreamRequest)(nil),       // 51: PB_Gui.StartScreenStreamRequest
	(*gui.StopScreenStreamRequest)(nil),        // 52: PB_Gui.StopScreenStreamRequest
	(*gui.ScreenFrame)(nil),                    // 53: PB_Gui.ScreenFrame
	(*gui.SendInputEventRequest)(nil),          // 54: PB_Gui.SendInputEventRequest
	(*gui.StartVirtualDisplayRequest)(nil),     // 55: PB_Gui.StartVirtualDisplayRequest
	(*gui.StopVirtualDisplayRequest)(nil),      // 56: PB_Gui.StopVirtualDisplayRequest
	(*gpio.SetPinMode)(nil),                    // 57: PB_Gpio.SetPinMode
	(*gpio.SetInputPull)(nil),                  // 58: PB_Gpio.SetInputPull
	(*gpio.GetPinMode)(nil),                    // 59: PB_Gpio.GetPinMode
	(*gpio.GetPinModeResponse)(nil),            // 60: PB_Gpio.GetPinModeResponse
	(*gpio.ReadPin)(nil),                       // 61: PB_Gpio.ReadPin
	(*gpio.ReadPinResponse)(nil),               // 62: PB_Gpio.ReadPinResponse
	(*gpio.WritePin)(nil),                      // 63: PB_Gpio.WritePin
	(*gpio.GetOtgMode)(nil),                    // 64: PB_Gpio.GetOtgMode
	(*gpio.GetOtgModeResponse)(nil),            // 65: PB_Gpio.GetOtgModeResponse
	(*gpio.SetOtgMode)(nil),                    // 66: PB_Gpio.SetOtgMode
	(*AppStateResponse)(nil),                   // 67: PB_App.AppStateResponse
	(*property.GetRequest)(nil),                // 68: PB_Property.GetRequest
	(*property.GetResponse)(nil),               // 69: PB_Property.GetResponse
	(*desktop.IsLockedRequest)(nil),            // 70: PB_Desktop.IsLockedRequest
	(*desktop.UnlockRequest)(nil),              // 71: PB_Desktop.UnlockRequest
	(*desktop.StatusSubscribeRequest)(nil),     // 72: PB_Desktop.StatusSubscribeRequest
	(*desktop.StatusUnsubscribeRequest)(nil),   // 73: PB_Desktop.StatusUnsubscribeRequest
	(*desktop.Status)(nil),                     // 74: PB_Desktop.Status
}
var file_flipper_proto_depIdxs = []int32{
	0,  // 0: PB.Main.command_status:type_name -> PB.CommandStatus
	1,  // 1: PB.Main.empty:type_name -> PB.Empty
	2,  // 2: PB.Main.stop_session:type_name -> PB.StopSession
	6,  // 3: PB.Main.system_ping_request:type_name -> PB_System.PingRequest
	7,  // 4: PB.Main.system_ping_response:type_name -> PB_System.PingResponse
	8,  // 5: PB.Main.system_reboot_request:type_name -> PB_System.RebootRequest
	9,  // 6: PB.Main.system_device_info_request:type_name -> PB_System.DeviceInfoRequest
	10, // 7: PB.Main.system_device_info_response:type_name -> PB_System.DeviceInfoResponse
	11, // 8: PB.Main.system_factory_reset_request:type_name -> PB_System.FactoryResetRequest
	12, // 9: PB.Main.system_get_datetime_request:type_name -> PB_System.GetDateTimeRequest
	13, // 10: PB.Main.system_get_datetime_response:type_name -> PB_System.GetDateTimeResponse
	14, // 11: PB.Main.system_set_datetime_request:type_name -> PB_System.SetDateTimeRequest
	15, // 12: PB.Main.system_play_audiovisual_alert_request:type_name -> PB_System.PlayAudiovisualAlertRequest
	16, // 13: PB.Main.system_protobuf_version_request:type_name -> PB_System.ProtobufVersionRequest
	17, // 14: PB.Main.system_protobuf_version_response:type_name -> PB_System.ProtobufVersionResponse
	18, // 15: PB.Main.system_update_request:type_name -> PB_System.UpdateRequest
	19, // 16: PB.Main.system_update_response:type_name -> PB_System.UpdateResponse
	20, // 17: PB.Main.system_power_info_request:type_name -> PB_System.PowerInfoRequest
	21, // 18: PB.Main.system_power_info_response:type_name -> PB_System.PowerInfoResponse
	22, // 19: PB.Main.storage_info_request:type_name -> PB_Storage.InfoRequest
	23, // 20: PB.Main.storage_info_response:type_name -> PB_Storage.InfoResponse
	24, // 21: PB.Main.storage_timestamp_request:type_name -> PB_Storage.TimestampRequest
	25, // 22: PB.Main.storage_timestamp_response:type_name -> PB_Storage.TimestampResponse
	26, // 23: PB.Main.storage_stat_request:type_name -> PB_Storage.StatRequest
	27, // 24: PB.Main.storage_stat_response:type_name -> PB_Storage.StatResponse
	28, // 25: PB.Main.storage_list_request:type_name -> PB_Storage.ListRequest
	29, // 26: PB.Main.storage_list_response:type_name -> PB_Storage.ListResponse
	30, // 27: PB.Main.storage_read_request:type_name -> PB_Storage.ReadRequest
	31, // 28: PB.Main.storage_read_response:type_name -> PB_Storage.ReadResponse
	32, // 29: PB.Main.storage_write_request:type_name -> PB_Storage.WriteRequest
	33, // 30: PB.Main.storage_delete_request:type_name -> PB_Storage.DeleteRequest
	34, // 31: PB.Main.storage_mkdir_request:type_name -> PB_Storage.MkdirRequest
	35, // 32: PB.Main.storage_md5sum_request:type_name -> PB_Storage.Md5sumRequest
	36, // 33: PB.Main.storage_md5sum_response:type_name -> PB_Storage.Md5sumResponse
	37, // 34: PB.Main.storage_rename_request:type_name -> PB_Storage.RenameRequest
	38, // 35: PB.Main.storage_backup_create_request:type_name -> PB_Storage.BackupCreateRequest
	39, // 36: PB.Main.storage_backup_restore_request:type_name -> PB_Storage.BackupRestoreRequest
	40, // 37: PB.Main.storage_tar_extract_request:type_name -> PB_Storage.TarExtractRequest
	41, // 38: PB.Main.app_start_request:type_name -> PB_App.StartRequest
	42, // 39: PB.Main.app_lock_status_request:type_name -> PB_App.LockStatusRequest
	43, // 40: PB.Main.app_lock_status_response:type_name -> PB_App.LockStatusResponse
	44, // 41: PB.Main.app_exit_request:type_name -> PB_App.AppExitRequest
	45, // 42: PB.Main.app_load_file_request:type_name -> PB_App.AppLoadFileRequest
	46, // 43: PB.Main.app_button_press_request:type_name -> PB_App.AppButtonPressRequest
	47, // 44: PB.Main.app_button_release_request:type_name -> PB_App.AppButtonReleaseRequest
	48, // 45: PB.Main.app_get_error_request:type_name -> PB_App.GetErrorRequest
	49, // 46: PB.Main.app_get_error_response:type_name -> PB_App.GetErrorResponse
	50, // 47: PB.Main.app_data_exchange_request:type_name -> PB_App.DataExchangeRequest
	51, // 48: PB.Main.gui_start_screen_stream_request:type_name -> PB_Gui.StartScreenStreamRequest
	52, // 49: PB.Main.gui_stop_screen_stream_request:type_name -> PB_Gui.StopScreenStreamRequest
	53, // 50: PB.Main.gui_screen_frame:type_name -> PB_Gui.ScreenFrame
	54, // 51: PB.Main.gui_send_input_event_request:type_name -> PB_Gui.SendInputEventRequest
	55, // 52: PB.Main.gui_start_virtual_display_request:type_name -> PB_Gui.StartVirtualDisplayRequest
	56, // 53: PB.Main.gui_stop_virtual_display_request:type_name -> PB_Gui.StopVirtualDisplayRequest
	57, // 54: PB.Main.gpio_set_pin_mode:type_name -> PB_Gpio.SetPinMode
	58, // 55: PB.Main.gpio_set_input_pull:type_name -> PB_Gpio.SetInputPull
	59, // 56: PB.Main.gpio_get_pin_mode:type_name -> PB_Gpio.GetPinMode
	60, // 57: PB.Main.gpio_get_pin_mode_response:type_name -> PB_Gpio.GetPinModeResponse
	61, // 58: PB.Main.gpio_read_pin:type_name -> PB_Gpio.ReadPin
	62, // 59: PB.Main.gpio_read_pin_response:type_name -> PB_Gpio.ReadPinResponse
	63, // 60: PB.Main.gpio_write_pin:type_name -> PB_Gpio.WritePin
	64, // 61: PB.Main.gpio_get_otg_mode:type_name -> PB_Gpio.GetOtgMode
	65, // 62: PB.Main.gpio_get_otg_mode_response:type_name -> PB_Gpio.GetOtgModeResponse
	66, // 63: PB.Main.gpio_set_otg_mode:type_name -> PB_Gpio.SetOtgMode
	67, // 64: PB.Main.app_state_response:type_name -> PB_App.AppStateResponse
	68, // 65: PB.Main.property_get_request:type_name -> PB_Property.GetRequest
	69, // 66: PB.Main.property_get_response:type_name -> PB_Property.GetResponse
	70, // 67: PB.Main.desktop_is_locked_request:type_name -> PB_Desktop.IsLockedRequest
	71, // 68: PB.Main.desktop_unlock_request:type_name -> PB_Desktop.UnlockRequest
	72, // 69: PB.Main.desktop_status_subscribe_request:type_name -> PB_Desktop.StatusSubscribeRequest
	73, // 70: PB.Main.desktop_status_unsubscribe_request:type_name -> PB_Desktop.StatusUnsubscribeRequest
	74, // 71: PB.Main.desktop_status:type_name -> PB_Desktop.Status
	5,  // 72: PB.Region.bands:type_name -> PB.Region.Band
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_flipper_proto_init() }
func file_flipper_proto_init() {
	if File_flipper_proto != nil {
		return
	}
	file_application_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flipper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flipper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flipper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Main); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flipper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flipper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region_Band); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flipper_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Main_Empty)(nil),
		(*Main_StopSession)(nil),
		(*Main_SystemPingRequest)(nil),
		(*Main_SystemPingResponse)(nil),
		(*Main_SystemRebootRequest)(nil),
		(*Main_SystemDeviceInfoRequest)(nil),
		(*Main_SystemDeviceInfoResponse)(nil),
		(*Main_SystemFactoryResetRequest)(nil),
		(*Main_SystemGetDatetimeRequest)(nil),
		(*Main_SystemGetDatetimeResponse)(nil),
		(*Main_SystemSetDatetimeRequest)(nil),
		(*Main_SystemPlayAudiovisualAlertRequest)(nil),
		(*Main_SystemProtobufVersionRequest)(nil),
		(*Main_SystemProtobufVersionResponse)(nil),
		(*Main_SystemUpdateRequest)(nil),
		(*Main_SystemUpdateResponse)(nil),
		(*Main_SystemPowerInfoRequest)(nil),
		(*Main_SystemPowerInfoResponse)(nil),
		(*Main_StorageInfoRequest)(nil),
		(*Main_StorageInfoResponse)(nil),
		(*Main_StorageTimestampRequest)(nil),
		(*Main_StorageTimestampResponse)(nil),
		(*Main_StorageStatRequest)(nil),
		(*Main_StorageStatResponse)(nil),
		(*Main_StorageListRequest)(nil),
		(*Main_StorageListResponse)(nil),
		(*Main_StorageReadRequest)(nil),
		(*Main_StorageReadResponse)(nil),
		(*Main_StorageWriteRequest)(nil),
		(*Main_StorageDeleteRequest)(nil),
		(*Main_StorageMkdirRequest)(nil),
		(*Main_StorageMd5SumRequest)(nil),
		(*Main_StorageMd5SumResponse)(nil),
		(*Main_StorageRenameRequest)(nil),
		(*Main_StorageBackupCreateRequest)(nil),
		(*Main_StorageBackupRestoreRequest)(nil),
		(*Main_StorageTarExtractRequest)(nil),
		(*Main_AppStartRequest)(nil),
		(*Main_AppLockStatusRequest)(nil),
		(*Main_AppLockStatusResponse)(nil),
		(*Main_AppExitRequest)(nil),
		(*Main_AppLoadFileRequest)(nil),
		(*Main_AppButtonPressRequest)(nil),
		(*Main_AppButtonReleaseRequest)(nil),
		(*Main_AppGetErrorRequest)(nil),
		(*Main_AppGetErrorResponse)(nil),
		(*Main_AppDataExchangeRequest)(nil),
		(*Main_GuiStartScreenStreamRequest)(nil),
		(*Main_GuiStopScreenStreamRequest)(nil),
		(*Main_GuiScreenFrame)(nil),
		(*Main_GuiSendInputEventRequest)(nil),
		(*Main_GuiStartVirtualDisplayRequest)(nil),
		(*Main_GuiStopVirtualDisplayRequest)(nil),
		(*Main_GpioSetPinMode)(nil),
		(*Main_GpioSetInputPull)(nil),
		(*Main_GpioGetPinMode)(nil),
		(*Main_GpioGetPinModeResponse)(nil),
		(*Main_GpioReadPin)(nil),
		(*Main_GpioReadPinResponse)(nil),
		(*Main_GpioWritePin)(nil),
		(*Main_GpioGetOtgMode)(nil),
		(*Main_GpioGetOtgModeResponse)(nil),
		(*Main_GpioSetOtgMode)(nil),
		(*Main_AppStateResponse)(nil),
		(*Main_PropertyGetRequest)(nil),
		(*Main_PropertyGetResponse)(nil),
		(*Main_DesktopIsLockedRequest)(nil),
		(*Main_DesktopUnlockRequest)(nil),
		(*Main_DesktopStatusSubscribeRequest)(nil),
		(*Main_DesktopStatusUnsubscribeRequest)(nil),
		(*Main_DesktopStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flipper_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flipper_proto_goTypes,
		DependencyIndexes: file_flipper_proto_depIdxs,
		EnumInfos:         file_flipper_proto_enumTypes,
		MessageInfos:      file_flipper_proto_msgTypes,
	}.Build()
	File_flipper_proto = out.File
	file_flipper_proto_rawDesc = nil
	file_flipper_proto_goTypes = nil
	file_flipper_proto_depIdxs = nil
}
